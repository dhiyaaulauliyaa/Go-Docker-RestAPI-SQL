// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user_query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (username, name, phone, gender, age, avatar)
VALUES
  ($1, $2, $3, $4, $5, $6) RETURNING id, username, name, phone, gender, age, avatar, created_at
`

type CreateUserParams struct {
	Username string         `json:"username"`
	Name     string         `json:"name"`
	Phone    int32          `json:"phone"`
	Gender   int32          `json:"gender"`
	Age      int32          `json:"age"`
	Avatar   sql.NullString `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name,
		arg.Phone,
		arg.Gender,
		arg.Age,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.Age,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
  users
WHERE
  id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, username, name, phone, gender, age, avatar, created_at
FROM
  users
WHERE
  id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.Age,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, username, name, phone, gender, age, avatar, created_at
FROM
  users
ORDER BY
  name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Phone,
			&i.Gender,
			&i.Age,
			&i.Avatar,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE
  users
SET
  username = $2,
  name = $3,
  phone = $4,
  gender = $5,
  age = $6,
  avatar = $7
WHERE
  id = $1 RETURNING id, username, name, phone, gender, age, avatar, created_at
`

type UpdateUserParams struct {
	ID       int32          `json:"id"`
	Username string         `json:"username"`
	Name     string         `json:"name"`
	Phone    int32          `json:"phone"`
	Gender   int32          `json:"gender"`
	Age      int32          `json:"age"`
	Avatar   sql.NullString `json:"avatar"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Name,
		arg.Phone,
		arg.Gender,
		arg.Age,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Phone,
		&i.Gender,
		&i.Age,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}
