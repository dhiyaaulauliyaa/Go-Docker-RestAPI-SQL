// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ContactTypes string

const (
	ContactTypesInstagram ContactTypes = "instagram"
	ContactTypesFacebook  ContactTypes = "facebook"
	ContactTypesWhatsapp  ContactTypes = "whatsapp"
	ContactTypesPhone     ContactTypes = "phone"
	ContactTypesEmail     ContactTypes = "email"
)

func (e *ContactTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContactTypes(s)
	case string:
		*e = ContactTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ContactTypes: %T", src)
	}
	return nil
}

type CommunitiesContact struct {
	CommunityID  int32        `json:"communityID"`
	ContactsType ContactTypes `json:"contactsType"`
	Value        string       `json:"value"`
}

type CommunitiesUser struct {
	CommunityID int32 `json:"communityID"`
	UserID      int32 `json:"userID"`
}

type Community struct {
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Address       string         `json:"address"`
	City          string         `json:"city"`
	Coordinate    sql.NullString `json:"coordinate"`
	ContactPerson string         `json:"contactPerson"`
	Logo          sql.NullString `json:"logo"`
	CreatedAt     time.Time      `json:"createdAt"`
}

type Event struct {
	ID        int32         `json:"id"`
	Name      string        `json:"name"`
	Venue     string        `json:"venue"`
	Community sql.NullInt32 `json:"community"`
	Masjid    sql.NullInt32 `json:"masjid"`
	Date      time.Time     `json:"date"`
	CreatedAt time.Time     `json:"createdAt"`
}

type EventsUser struct {
	EventID int32 `json:"eventID"`
	UserID  int32 `json:"userID"`
}

type EventsUstadz struct {
	EventID  int32 `json:"eventID"`
	UstadzID int32 `json:"ustadzID"`
}

type Masjid struct {
	ID         int32          `json:"id"`
	Name       string         `json:"name"`
	Address    string         `json:"address"`
	City       string         `json:"city"`
	Coordinate string         `json:"coordinate"`
	Phone      sql.NullString `json:"phone"`
	Logo       sql.NullString `json:"logo"`
	CreatedAt  time.Time      `json:"createdAt"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Phone        string    `json:"phone"`
	RefreshToken string    `json:"refreshToken"`
	UserAgent    string    `json:"userAgent"`
	ClientIp     string    `json:"clientIp"`
	IsBlocked    bool      `json:"isBlocked"`
	ExpiresAt    time.Time `json:"expiresAt"`
	CreatedAt    time.Time `json:"createdAt"`
}

type User struct {
	ID        int32          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Name      string         `json:"name"`
	Phone     string         `json:"phone"`
	Email     sql.NullString `json:"email"`
	Gender    int32          `json:"gender"`
	Age       int32          `json:"age"`
	Avatar    sql.NullString `json:"avatar"`
	CreatedAt time.Time      `json:"createdAt"`
}

type UserFavoritedCommunity struct {
	UserID      int32 `json:"userID"`
	CommunityID int32 `json:"communityID"`
}

type UserFavoritedEvent struct {
	UserID  int32 `json:"userID"`
	EventID int32 `json:"eventID"`
}

type UserFavoritedUstadz struct {
	UserID   int32 `json:"userID"`
	UstadzID int32 `json:"ustadzID"`
}

type Ustadz struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	Avatar    sql.NullString `json:"avatar"`
	Gender    int32          `json:"gender"`
	CreatedAt time.Time      `json:"createdAt"`
}

type UstadzsContact struct {
	UstadzID     int32        `json:"ustadzID"`
	ContactsType ContactTypes `json:"contactsType"`
	Value        string       `json:"value"`
}
