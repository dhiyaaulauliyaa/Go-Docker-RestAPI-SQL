// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: masjid_query.sql

package db

import (
	"context"
	"database/sql"
)

const createMasjid = `-- name: CreateMasjid :one
INSERT INTO
  masjids (name, address, city, coordinate, logo)
VALUES
  ($1, $2, $3, $4, $5) RETURNING id, name, address, city, coordinate, logo, created_at
`

type CreateMasjidParams struct {
	Name       string         `json:"name"`
	Address    string         `json:"address"`
	City       string         `json:"city"`
	Coordinate string         `json:"coordinate"`
	Logo       sql.NullString `json:"logo"`
}

func (q *Queries) CreateMasjid(ctx context.Context, arg CreateMasjidParams) (Masjid, error) {
	row := q.db.QueryRowContext(ctx, createMasjid,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Coordinate,
		arg.Logo,
	)
	var i Masjid
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Coordinate,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMasjid = `-- name: DeleteMasjid :exec
DELETE FROM
  masjids
WHERE
  id = $1
`

func (q *Queries) DeleteMasjid(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMasjid, id)
	return err
}

const getMasjid = `-- name: GetMasjid :one
SELECT
  id, name, address, city, coordinate, logo, created_at
FROM
  masjids
WHERE
  id = $1
`

func (q *Queries) GetMasjid(ctx context.Context, id int32) (Masjid, error) {
	row := q.db.QueryRowContext(ctx, getMasjid, id)
	var i Masjid
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Coordinate,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const listMasjids = `-- name: ListMasjids :many
SELECT
  id, name, address, city, coordinate, logo, created_at
FROM
  masjids
ORDER BY
  name
`

func (q *Queries) ListMasjids(ctx context.Context) ([]Masjid, error) {
	rows, err := q.db.QueryContext(ctx, listMasjids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Masjid{}
	for rows.Next() {
		var i Masjid
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.Coordinate,
			&i.Logo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMasjid = `-- name: UpdateMasjid :one
UPDATE
  masjids
SET
  name = $2,
  address = $3,
  city = $4,
  coordinate = $5,
  logo = $6
WHERE
  id = $1 RETURNING id, name, address, city, coordinate, logo, created_at
`

type UpdateMasjidParams struct {
	ID         int32          `json:"id"`
	Name       string         `json:"name"`
	Address    string         `json:"address"`
	City       string         `json:"city"`
	Coordinate string         `json:"coordinate"`
	Logo       sql.NullString `json:"logo"`
}

func (q *Queries) UpdateMasjid(ctx context.Context, arg UpdateMasjidParams) (Masjid, error) {
	row := q.db.QueryRowContext(ctx, updateMasjid,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Coordinate,
		arg.Logo,
	)
	var i Masjid
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Coordinate,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}
