// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: ustadz_query.sql

package db

import (
	"context"
	"database/sql"
)

const createUstadz = `-- name: CreateUstadz :one
INSERT INTO
  ustadzs (name, avatar, gender)
VALUES
  ($1, $2, $3) RETURNING id, name, avatar, gender, created_at
`

type CreateUstadzParams struct {
	Name   string         `json:"name"`
	Avatar sql.NullString `json:"avatar"`
	Gender int32          `json:"gender"`
}

func (q *Queries) CreateUstadz(ctx context.Context, arg CreateUstadzParams) (Ustadz, error) {
	row := q.db.QueryRowContext(ctx, createUstadz, arg.Name, arg.Avatar, arg.Gender)
	var i Ustadz
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUstadz = `-- name: DeleteUstadz :exec
DELETE FROM
  ustadzs
WHERE
  id = $1
`

func (q *Queries) DeleteUstadz(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUstadz, id)
	return err
}

const getUstadz = `-- name: GetUstadz :one
SELECT
  id, name, avatar, gender, created_at
FROM
  ustadzs
WHERE
  id = $1
`

func (q *Queries) GetUstadz(ctx context.Context, id int32) (Ustadz, error) {
	row := q.db.QueryRowContext(ctx, getUstadz, id)
	var i Ustadz
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const listUstadz = `-- name: ListUstadz :many
SELECT
  id, name, avatar, gender, created_at
FROM
  ustadzs
ORDER BY
  name
`

func (q *Queries) ListUstadz(ctx context.Context) ([]Ustadz, error) {
	rows, err := q.db.QueryContext(ctx, listUstadz)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ustadz{}
	for rows.Next() {
		var i Ustadz
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Avatar,
			&i.Gender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUstadz = `-- name: UpdateUstadz :one
UPDATE
  ustadzs
SET
  name = $2,
  avatar = $3,
  gender = $4
WHERE
  id = $1 RETURNING id, name, avatar, gender, created_at
`

type UpdateUstadzParams struct {
	ID     int32          `json:"id"`
	Name   string         `json:"name"`
	Avatar sql.NullString `json:"avatar"`
	Gender int32          `json:"gender"`
}

func (q *Queries) UpdateUstadz(ctx context.Context, arg UpdateUstadzParams) (Ustadz, error) {
	row := q.db.QueryRowContext(ctx, updateUstadz,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Gender,
	)
	var i Ustadz
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}
