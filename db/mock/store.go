// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhiyaaulauliyaa/learn-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/dhiyaaulauliyaa/learn-go/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockStore) ChangePassword(arg0 context.Context, arg1 db.ChangePasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockStoreMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockStore)(nil).ChangePassword), arg0, arg1)
}

// CreateEvent mocks base method.
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 db.CreateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreateMasjid mocks base method.
func (m *MockStore) CreateMasjid(arg0 context.Context, arg1 db.CreateMasjidParams) (db.Masjid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMasjid", arg0, arg1)
	ret0, _ := ret[0].(db.Masjid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMasjid indicates an expected call of CreateMasjid.
func (mr *MockStoreMockRecorder) CreateMasjid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMasjid", reflect.TypeOf((*MockStore)(nil).CreateMasjid), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUstadz mocks base method.
func (m *MockStore) CreateUstadz(arg0 context.Context, arg1 db.CreateUstadzParams) (db.Ustadz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUstadz", arg0, arg1)
	ret0, _ := ret[0].(db.Ustadz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUstadz indicates an expected call of CreateUstadz.
func (mr *MockStoreMockRecorder) CreateUstadz(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUstadz", reflect.TypeOf((*MockStore)(nil).CreateUstadz), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockStore) DeleteEvent(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockStoreMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStore)(nil).DeleteEvent), arg0, arg1)
}

// DeleteMasjid mocks base method.
func (m *MockStore) DeleteMasjid(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMasjid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMasjid indicates an expected call of DeleteMasjid.
func (mr *MockStoreMockRecorder) DeleteMasjid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMasjid", reflect.TypeOf((*MockStore)(nil).DeleteMasjid), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUstadz mocks base method.
func (m *MockStore) DeleteUstadz(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUstadz", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUstadz indicates an expected call of DeleteUstadz.
func (mr *MockStoreMockRecorder) DeleteUstadz(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUstadz", reflect.TypeOf((*MockStore)(nil).DeleteUstadz), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockStore) GetEvent(arg0 context.Context, arg1 int32) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockStoreMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStore)(nil).GetEvent), arg0, arg1)
}

// GetMasjid mocks base method.
func (m *MockStore) GetMasjid(arg0 context.Context, arg1 int32) (db.Masjid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasjid", arg0, arg1)
	ret0, _ := ret[0].(db.Masjid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasjid indicates an expected call of GetMasjid.
func (mr *MockStoreMockRecorder) GetMasjid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasjid", reflect.TypeOf((*MockStore)(nil).GetMasjid), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUstadz mocks base method.
func (m *MockStore) GetUstadz(arg0 context.Context, arg1 int32) (db.Ustadz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUstadz", arg0, arg1)
	ret0, _ := ret[0].(db.Ustadz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUstadz indicates an expected call of GetUstadz.
func (mr *MockStoreMockRecorder) GetUstadz(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUstadz", reflect.TypeOf((*MockStore)(nil).GetUstadz), arg0, arg1)
}

// ListEvents mocks base method.
func (m *MockStore) ListEvents(arg0 context.Context) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockStoreMockRecorder) ListEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockStore)(nil).ListEvents), arg0)
}

// ListMasjids mocks base method.
func (m *MockStore) ListMasjids(arg0 context.Context) ([]db.Masjid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMasjids", arg0)
	ret0, _ := ret[0].([]db.Masjid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMasjids indicates an expected call of ListMasjids.
func (mr *MockStoreMockRecorder) ListMasjids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMasjids", reflect.TypeOf((*MockStore)(nil).ListMasjids), arg0)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0)
}

// ListUstadz mocks base method.
func (m *MockStore) ListUstadz(arg0 context.Context) ([]db.Ustadz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUstadz", arg0)
	ret0, _ := ret[0].([]db.Ustadz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUstadz indicates an expected call of ListUstadz.
func (mr *MockStoreMockRecorder) ListUstadz(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUstadz", reflect.TypeOf((*MockStore)(nil).ListUstadz), arg0)
}

// UpdateEvent mocks base method.
func (m *MockStore) UpdateEvent(arg0 context.Context, arg1 db.UpdateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockStoreMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStore)(nil).UpdateEvent), arg0, arg1)
}

// UpdateMasjid mocks base method.
func (m *MockStore) UpdateMasjid(arg0 context.Context, arg1 db.UpdateMasjidParams) (db.Masjid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMasjid", arg0, arg1)
	ret0, _ := ret[0].(db.Masjid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMasjid indicates an expected call of UpdateMasjid.
func (mr *MockStoreMockRecorder) UpdateMasjid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMasjid", reflect.TypeOf((*MockStore)(nil).UpdateMasjid), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUstadz mocks base method.
func (m *MockStore) UpdateUstadz(arg0 context.Context, arg1 db.UpdateUstadzParams) (db.Ustadz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUstadz", arg0, arg1)
	ret0, _ := ret[0].(db.Ustadz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUstadz indicates an expected call of UpdateUstadz.
func (mr *MockStoreMockRecorder) UpdateUstadz(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUstadz", reflect.TypeOf((*MockStore)(nil).UpdateUstadz), arg0, arg1)
}
